# noinspection GraphQLTypeRedefinition
directive @hasScope(scope: [AuthScopes]!) on FIELD_DEFINITION

enum AuthScopes {
    Guest
    Admin
    User
    Boa
    Asp
}

type Query {
    helloThere: String! @hasScope(scope: [Guest])
    streamKeys: [StreamKey]! @hasScope(scope: [Admin])
    streamApps: StreamApplications! @hasScope(scope: [Admin])
    ASPs: [ASP] @hasScope(scope: [Admin])
    ASP(name: String!): ASP @hasScope(scope: [Admin, Asp])
}

type Mutation {

    addStreamKey(
        streamKey: String!
        pwd: String
        alias: String
        start: String
        end: String
    ): StreamKey @hasScope(scope: [Admin])

    addGenPwdStreamKey(
        streamKey: String!
        alias: String
        start: String
        end: String
    ): StreamKey @hasScope(scope: [Admin])

    editStreamKey(
        streamKey: String!
        pwd: String
        alias: String
        start: String
        end: String
    ): StreamKey @hasScope(scope: [Admin])

    genTempStreamKey(alias: String, start: String!, end: String!): StreamKey @hasScope(scope: [Admin])

    deleteStreamKey(streamKey: String!): Boolean @hasScope(scope: [Admin])
}

type Subscription {
    StreamAppsUpdate: StreamApplications! @hasScope(scope: [Admin])
}

type StreamKey {
    streamKey: String!
    pwd: String
    alias: String
    start: String
    end: String
}

type ASP {
    hwID: ID! # Used as hashed api key
    name: String!
    sourceURL: String
    enablePlayback: Boolean!
    #  options: null
    currentState: ASPState!
    #  children: [ID]
}

enum ASPState {
    OFFLINE
    PLAYING
    ERROR
    READY
}

type StreamApplications {
    srt: [SRTStream]!
    rtmp: [RTMPApplications]!
}

type RTMPApplications {
    name: String
    streams: [RTMPStreams]
}

type RTMPStreams {
    name: String
    time: Int
    bwIn: Int
    bytesIn: String
    bwOut: Int
    bytesOut: String
    bwAudio: Int
    bwVideo: Int
    clients: [RTMPClients]
    meta: RTMPMeta
}

type RTMPMeta{
    video: RTMPVideo
    audio: RTMPAudio
}

type RTMPVideo {
    width: Int
    height: Int
    framerate: Float
    codec: String
    profile: String
    compat: String
    level: Float
}

type RTMPAudio {
    codec: String
    profile: String
    channels: Int
    sampleRate: Float
}

type RTMPClients {
    id: Int
    address: String
    time: Int
    flashVersion: String
    dropped: Int
    avSync: Int
    timestamp: Int
    publishing: Boolean
    active: Boolean
}

type SRTStream {
    name: String
    url: String
    clients: Int
    created: String
}
